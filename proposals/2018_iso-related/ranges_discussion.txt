----------------------------------------------------------------------   
2016-02-01    
From: Steven Anderson <StevenCAnderson@hotmail.com>    
To: DC-ARCHITECTURE@JISCMAIL.AC.UK   
Subject: dcterms:extent, dcterms:format, and dcterms:created range questions:   

I'm writing as it seems the range of the above terms seem to differ in terms
of official definition and actual practice. As such, I'd like to see if
there is any possibility of updating their range or general thoughts about
how often the range is being broken in the current usage of these
predicates?

To start,   

dcterms:extent

(http://dublincore.org/documents/2012/06/14/dcmi-terms/?v=terms#terms-extent)
has a range of http://purl.org/dc/terms/SizeOrDuration. The official usage
guidelines say this can not be a literal:
http://wiki.dublincore.org/index.php/User_Guide/Publishing_Metadata#dcterms:
extent. However, most major institutions are using this predicate with a simple
string literal from what I can tell. Examples include DPLA[1].  Europeana[2],
and most Fedora 4 Commons based systems I have seen.   

dcterms:format

(http://dublincore.org/documents/2012/06/14/dcmi-terms/?v=terms#terms-format)
has a range of http://purl.org/dc/terms/MediaTypeOrExtent. The official
usage guidelines say this can not be a literal:
http://wiki.dublincore.org/index.php/User_Guide/Publishing_Metadata#dcterms:
format. Unlike extent, there is a Dublin Core Elements version of this term
that it appears both DPLA and Europeana correctly use. But I've seen some
smaller Hydra institutions implement the dcterms version with string
literals and, furthermore, the "mime" namespace in the example given in the
usage documentation is currently not valid. There is a github ticket filed
about that currently being down since October 15th, 2015:
https://github.com/edsu/mediatypes/issues/2. It makes it hard to use this
element properly when a recommended uri implementation of MediaTypeOrExtent
doesn't resolve.

dcterms:created

(http://dublincore.org/documents/2012/06/14/dcmi-terms/?v=terms#terms-created)
has a range of literal. Yet some (like Europeana[2] or University of
California Santa Barbara) have the option to use this with EDM:Timespan that
is another minted object and not a literal.

So... essentially... is it fine to break the ranges of these predicates when
needed for our own use cases? For example, if designing a system, is it best
to just use dcterms:extent with a string literal as it appears many others
are doing? Or is there any possibility of that range for dcterms:extent
being updated? Or should we use a different extent predicate like
bibframe:extent that supports string literals if we require that? In the
case that a preferred implementation of the more refined dcterms term
doesn't work (like with dcterms:format), are the any thoughts about using
the legacy dublin core elements namespace version instead? In the case of
dates, we were going to use EDTF since that would allow for the encoding of
ranges within a string literal. However, if ranges are really not to ever be
enforced, it might be worth us looking at EDM:Timespan again to represent
dates for our object (hence why that is also included in the message above).

Just wanted to pick all of your brains on these topics as we work towards a
Linked Data Friendly RDF Application Profile. Thank you for your time!

[1] http://dp.la/info/wp-content/uploads/2015/03/MAPv4.pdf
[2] http://pro.europeana.eu/files/Europeana_Professional/Share_your_data/Technical_requirements/EDM_Documentation/EDM_Mapping_Guidelines_v2.2.pdf

----------------------------------------------------------------------
2016-02-08
From:         Makx Dekkers <subs@MAKXDEKKERS.COM>   
Subject: Re: dcterms:extent, dcterms:format, and dcterms:created range questions:   
To:           DC-ARCHITECTURE@JISCMAIL.AC.UK   

I think this is an important discussion to have.

Over the years, I have been involved in many projects struggling with this.
I know that the Semantic Web purists will insist that you need to be strict
at respecting the domain and range definitions because otherwise the whole
idea of inferencing becomes impossible, and automatic processing of data
becomes difficult. On the other hand, people can happily violate any of
those definitions; there is not Semantic Web police and people do whatever
they want.   

In fact the statement 'Anyone can say anything about anything' is extended
to 'Anyone can say anything about anything, and they will do this any way
they want'.   

My take on this is that if you're mostly operating in a more or less closed
environment, e.g. in a community that agrees on a common way of doing
things, there is no problem with 'agreed violations' because the community
members know what to do and what to expect, but if you want your stuff to
make sense in a more open environment, you'd better do things the way they
were supposed to be done.

----------------------------------------------------------------------   
2016-02-12
From:         Antoine Isaac <aisaac@FEW.VU.NL>
Subject: Re: dcterms:extent, dcterms:format, and dcterms:created range questions:
To:           DC-ARCHITECTURE@JISCMAIL.AC.UK

As you mention the Europeana Data Model maybe someone from Europeana should
answer... Here I go, even if it won't be very much different from what Makx
said (as a matter of fact, Makx was a key person in the creation of EDM!).

We need the flexibility, as our data is mixed: we sometimes receive literals,
sometimes URIs. And it seemed very bad to have to use two different properties.
And there was no "created" in the DC1.1 namespace, that doesn't have formal
ranges. Maybe putting this formal range on dcterms:created was not the best
decision, at the time it was created.

Note that the properties at schema.org also have a softer approach to 'ranges'.
After some discussion they ended up using the notion of 'expected types', which
is much more flexible [1]

I'm not saying that control is bad per se. On the contrary, in many cases it is
crucial, see the ongoing work in the DCMI RDF AP Task Group [2] (and we do
control some things in Europeana). But having elements controlled too strictly
at the level of the vocabulary/ontology may be counterproductive (in the
Semantic Web community some use the notion of 'semantic overcommitment to refer
to this issue).

[1] see for example http://schema.org/dateCreated   
[2] http://wiki.dublincore.org/index.php/RDF_Application_Profiles   

