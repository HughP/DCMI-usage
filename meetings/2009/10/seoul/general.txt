----------------------------------------------------------------------
2009-06-20 Remarks from Karen Coyle (used in this packet with permission!)

    The pros and cons are mainly not related directly to your
    data, but to the "state of the art" for metadata.  This is a
    time of transition from a database and record model of
    metadata to a model that focuses on the data itself and on
    facilitating open services on the Web.  Examples of the
    first are MARC21, UniMARC, and MODS. Examples of the second
    are Dublin Core, the Bibliographic Ontology [1], and the
    encoding of RDA (e.g.  [2]).  (You may want to look at my
    slides: [3].)

    While the record model is well-established and the data
    formats well-known, they represent a sunsetting technology.
    The RDF data models, although intended to support a upcoming
    web services and semantic web functionality, are so new that
    there is not *yet* a significant community with metadata
    that can take advantage of its capabilities.  You're
    standing at a "cutting edge" moment, which is why this
    decision needs to be made.  A few years ago or a few years
    from now, I think the answer would be obvious.

    A cross-walk between your data and MODS would require
    minimum effort.  The resulting data format would be of the
    "old style." The primary disadvantage of that solution for
    you would be that you cannot easily extend the MODS record
    to accommodate data elements of yours that are not included
    in MODS as defined by the Library of Congress.  A record
    format like MODS or MARC not only defines the data structure
    but also the contents.  As you mentioned, this is
    problematic for you with elements like multi-lingual titles.
    You would either have to give up some of your own
    requirements or use MODS in a non-standard way.

    An application profile based on the Dublin Core model (which
    itself is based on RDF and semantic web concepts) would
    require more effort for the development, but would result in
    a fully extensible data format.  You could add new data
    elements, new controlled list members, and new controlled
    lists, at any time.  You could define your own requirement
    for fields, such as having a title field that repeats as
    needed to accommodate the languages.  All of these would be
    defined in the application profile, and, if possible, would
    all be openly accessible on the Web.  This latter would then
    allow anyone else to read and process your data, or to adopt
    all or part of your data definitions for their own use.

    Because few applications work directly with semantic web
    data today, output from applications like OAI-PMH would need
    to be in known formats, such as DC or MODS. The translation
    to these formats is not hindered by the use of RDF as the
    basis for your data.

    I think that the Dublin Core application profile provides
    you with many advantages within your own system: rigorous
    design along with great flexibility.  It may be difficult to
    understand at first because we are so accustomed to the
    record model, but it is best to think of RDF as being an
    underlying format that is really only visible at the
    programming level.  Catalogers and users should see data the
    same way they do today.  This success of this depends your
    application developers.  Not knowing more about the
    technical capabilities at your disposal, I cannot comment on
    that.

    [1] http://bibliontology.com/
    [2] http://metadataregistry.org/schema/show/id/1.html
    [3] http://kcoyle.net/metadata_netsl_09.ppt
